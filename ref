#!/usr/bin/python3

import os
import re
import json
import sys
import argparse
from datetime import date
import requests
from bs4 import BeautifulSoup

BASE = "/home/falgout"
YOUTUBE = os.path.join(BASE, "references", "youtube_references.md")
LINKS = os.path.join(BASE, "references", "links.md")

def parse_arguments():
    parser = argparse.ArgumentParser(description="Add URL to markdown files.")
    parser.add_argument("url", help="URL to be added.")
    parser.add_argument("-f", "--force", action="store_true", help="Force addition even if URL already exists.")
    args = parser.parse_args()
    args.url = args.url.replace('&', '\&')
    return args


def url_exists_in_file(url, file_path):
    with open(file_path, "r") as f:
        for line in f:
            if url in line:
                return True
    return False

args = parse_arguments()
URL = args.url
force = args.force
today = date.today().strftime("%Y-%m-%d")

def get_youtube_data(url):
    video_id = re.search(r"v=(\w+)", url)
    if video_id:
        video_id = video_id.group(1)
        api_url = f"https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v={video_id}&format=json"
        response = requests.get(api_url)
        if response.status_code == 200:
            data = response.json()
            title = data["title"]
            uploader = data["author_name"]
            return video_id, title, uploader
    return None, None, None

def get_title_from_url(url):
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, "html.parser")
        title = soup.title.string.strip() if soup.title else None
        return title
    else:
        print(f"\tRESPONSE {response}")
        return "Unknown Title"
    return None

if "youtube.com" in URL:
    playlist_id = re.search(r"list=(\w+)", URL)
    
    if playlist_id:
        playlist_id = playlist_id.group(1)
        playlist_url = f"https://www.youtube.com/watch?list={playlist_id}"
        if not force and url_exists_in_file(playlist_url, YOUTUBE):
            print(f"Error: Playlist URL {playlist_url} already recorded.")
        else:
            with open(YOUTUBE, "a") as f:
                f.write(f"{today}|[{playlist_url}]|NO TITLE\n")
            print(f"{today}|[{playlist_url}]|NO TITLE")
        
    else:
        video_id, title, uploader = get_youtube_data(URL)
        if video_id and title and uploader:
            title = re.sub('[^0-9a-zA-Z]+', ' ', title) # Remove non-alphanumeric characters
            title = " ".join(title.split()) # Remove extra spaces
            video_url = f"https://www.youtube.com/watch?v={video_id}"
            if not force and url_exists_in_file(video_url, YOUTUBE):
                print(f"Error: Video URL {video_url} already recorded.")
            else:
                with open(YOUTUBE, "a") as f:
                    f.write(f"{today}|[{video_url}]|({title})|{uploader}\n")
                print(f"{today}|[{video_url}]|({title})|{uploader}")
        else:
            print("Invalid YouTube URL")

else:
    title = get_title_from_url(URL)
    if title:
        if not force and url_exists_in_file(URL, LINKS):
            print(f"Error: URL {URL} already recorded.")
        else:
            with open(LINKS, "a") as f:
                f.write(f"{today}|[{URL}]|({title})\n")
            print(f"{today}|[{URL}]|({title})")
    else:
        print("Invalid URL")
